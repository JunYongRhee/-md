리팩토링 총 정리
=============================

## 디자인 패턴
### 디자인 패턴 (Design Patterns) 이란 ?
- 객체 지향 프로그래밍 설계를 할 때 자주 발생하는 문제들을 피하기 위해 사용되는 패턴
- 방식을 통해 소프트웨어 설계에서 얻은 세세한 경험들들을 기록 해 놓은 패턴(어떤 상황의 문제에 대한 해법)
- 일반적으로 하나의 패턴에는 네가지 요소가 반드시 들어가 있다.
  - 패턴이름
  - 문제 : 언제 패턴을 사용하는가를 서술하며 해결할 문제와 그 배경을 설명한다.
  - 해법 : 설계를 구성하는 요 소들과 그 요소들 간의 관계 책임 그리고 협력 관계를 서술한다.
  - 결과 : 디자인 패턴을 적용해서 얻는 결과와 장단점을 서술한다.
- 생성 패턴 (추상 객체 인스턴스화)
- 구조 패턴 (객체 결합)
- 행위 패턴(객체 간 커뮤케이션)

## 리팩토링 기법
### Duplicated Code (중복코드)
한 클래스의 서로 다른 두 메소드 안에 같은 코드가 있는 경우.
동일한 슈퍼클래스를 갖는 두 서브클래스에서 같은 코드가 나타나는 경우.
- 사용하는 이유
  - 중복된 만큼 수정작업을 반복해야 한다.
  - 로직에 대한 설명이나 문서화가 힘들다.
  - 재사용성이 떨이지기 때문이다.
- 장점
  - 가독성이 향상되고 코드의 문서화가 쉬워진다.
  - 중복 코드 제거를 통해 유지보수 비용을 절감한다.
  - 설계를 개선하고 코드의 품질을 높이는 빠른 방법이다.
- 단점
  - 그 과정에서 성능 저하가 발생 할 수 있다.
  - 코드가 복잡해져 이해하기 힘들 수 있다.
***

### Long Method(장황한 메서드)
- 짧은 메소드로 된 코드를 쉽게 이해 하려면 이름을 잘 지어야 한다.
- 메소드명을 잘 지으면 메소드의 내용을 볼 필요가 없다.
- 주석의 필요성을 느낄 때 그 구간을 메소드로 만든다.
***

### Large Class (방대한 클래스)
- 클래스가 지나치게 많은 인스턴스 변수를 갖는 경우.
- 중복된 코드가 존재할 확률이 높다.
- 접두어나 접미어가 같다면 하나의 클래스로 추출하는 것이 좋다.
***

### Long Parameter List (과다한 매개변수)
- 매개변수가 많으면 서로 일관성이 없어지거나 사용이 불편하다.
- 매개변수들을 클래스나 메소드를 통해 넘겨준다.
***

### Divergent Change (수정의 산발)
- 클래스가 다양한 이유로 다양한 방식으로 수정되는 경우.
- 특정 원인으로 인해 변하는 부분을 별도의 클래스로 추출한다.
***

### Shotgun Surgery (기능의 상재)
- 수정할 때 여러 클래스에서 많은 부분을 고쳐야 할 경우.
- 메소드나 필드를 하나의 클래스로 추출한다.
***

### Feature Envy (잘못된 소속)
- 다른 객체에 접근하기 위해 메소드를 자주 호출 할 경우.
- 메소드를 적당한 클래스로 이동시킨다.
***

### Feature Envy (데이터 뭉치)
- 여러 데이터들이 하나의 필드로 보일 경우.
- 별도의 클래스로 추출한다.
***

### Primitive Obsession (강박적 기본 타입 사용)
- 기본형으로 이루어진 여러 데이터가 있는 경우.
- 관련 있는 데이터들을 묶어서 클래스로 만든다.
***

### Switch Statement
- Switch 문은 중복이 자주 생긴다.
- 동일한 Switch가 다른 곳에서 또 쓰일가능성이 크다.
- 존재하는 Switch 문을 전부 찾아서 수정해야한다.
- Switch 문을 추상메소드나 인터페이스로 추출한다.
- Switch 문을 사용할 클래스에서 상속받아 재정의 한다.
***

### Parallel Inheritance Hierarchies (평행 상속 계층)
- 한 클래스의 하위클래스를 만들 때 다른 클래스의 하위 클래스도 만들 경우.
- 한 상속 계층의 인스턴스가 다른 상속계층의 인스턴스를 참조하게 만들면 된다.
***

### Lazy Class(직무유기 클래스)
- 리팩토링으로 인해 기능이 작아진 클래스.
- 수정 할 계획으로 작성했으나 실시하지 않아 쓸모없어진 클래스.
- 제거 해야 한다.
***

### Speculative Generality(막연한 범용 코드)
- 현재 필요 없는 코드.
- 오직 테스트 에서만 사용되는 메소드나 클래스.
***

### 임시 필드
- 메소드 내의 변수들은 별도의 클래스로 추출하자.
***

### Message Chains(메시지 체인)
- 연쇄적 요청이 발생하는것. (a -> b -> c -> a)
- 결과 객체를 별도의 메소드로 추출하여 옮긴다.
***

### Middle Man (과잉 중개 메서드)
- 어떤 클래스가 하는 것 없이 메소드만 위임할 때.
- 그 클래스에서 직접 메소드를 호출한다.
***

### Inappropriate Intimacy(지나친 관여)

***

### Alternative Class with Different Interfaces(인터페이스가 다른 대용 클래스)
***

### Incomplete Library Class(미흡한 라이브러리 클래스)
***

### 데이터 클래스
***

### Refuged Bequest(방치된 상속물)
***

### 불필요한 주석